import { Injectable } from '@nestjs/common';
import { EventService } from '../../event/event.service';
import { Model, Types } from 'mongoose';
import { InjectModel } from '@nestjs/mongoose';
import { Notification } from './schema/notification.schema';

@Injectable()
export class NotificationService {
  
  constructor(
    @InjectModel(Notification.name)private readonly notificationModel: Model<Notification>,
    private eventService: EventService
  ) {}

  // üîπ X·ª≠ l√Ω tin nh·∫Øn nh√≥m
  async handleChatMessage(payload) {
    const { senderId, groupId, content, mediaURL, recipients, messageId } = payload;
    
    for (const userId of recipients) {
      if (userId !== senderId) {
        this.eventService.notificationToUser(userId, 'newmessagetogroup', {
          messageId,
          groupId,
          senderId,
          content,
          mediaURL,
          timestamp: new Date().toISOString(),
        });
      }
    }
  }

  // üîπ X·ª≠ l√Ω b√¨nh lu·∫≠n b√†i vi·∫øt

  async handlePostEvent(payload) {
    const { postId, userId, ownerId, message, timestamp } = payload;
  
    if (userId !== ownerId) {
      this.eventService.notificationToUser(ownerId, 'newpostevent', {
        postId,
        userId,
        message,
        timestamp,
      });
    }
  }

  async handleKafkaMessage(message: any) {
    try {
      const parsedMessage = JSON.parse(message.value);
  
      // Chuy·ªÉn ƒë·ªïi ObjectId
      if (parsedMessage.userId && Types.ObjectId.isValid(parsedMessage.userId)) {
        parsedMessage.userId = new Types.ObjectId(parsedMessage.userId);
      }
      if (parsedMessage.ownerId && Types.ObjectId.isValid(parsedMessage.ownerId)) {
        parsedMessage.ownerId = new Types.ObjectId(parsedMessage.ownerId);
      }
      if (parsedMessage.data.postId && Types.ObjectId.isValid(parsedMessage.data.postId)) {
        parsedMessage.data.postId = new Types.ObjectId(parsedMessage.data.postId);
      }
  
      // Ki·ªÉm tra n·∫øu l√† h√†nh ƒë·ªông "like" ho·∫∑c "unlike"
      if (parsedMessage.type === 'like' || parsedMessage.type === 'unlike') {
        const existingNotification = await this.notificationModel.findOne({
          userId: parsedMessage.userId,
          'data.postId': parsedMessage.data.postId, // Ki·ªÉm tra ch√≠nh x√°c post
          type: 'like',
        });
  
        if (parsedMessage.type === 'like') {
          if (!existingNotification) {
            // N·∫øu ch∆∞a t·ªìn t·∫°i, t·∫°o m·ªõi
            await this.notificationModel.create(parsedMessage);
            console.log('‚úÖ Notification saved:', parsedMessage);
          } else {
            // N·∫øu ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t timestamp
            await this.notificationModel.updateOne(
              { _id: existingNotification._id },
              { $set: { 'data.timestamp': new Date() } }
            );
            console.log('üîÑ Updated existing notification:', parsedMessage);
          }
        } else if (parsedMessage.type === 'unlike' && existingNotification) {
          // N·∫øu unlike, x√≥a th√¥ng b√°o
          await this.notificationModel.deleteOne({ _id: existingNotification._id });
          console.log('üóëÔ∏è Removed unlike notification:', parsedMessage);
        }
      } else {
        // X·ª≠ l√Ω c√°c lo·∫°i th√¥ng b√°o kh√°c
        const existingNotification = await this.notificationModel.findOne({
          messageId: parsedMessage.messageId,
        });
  
        if (!existingNotification) {
          await this.notificationModel.create(parsedMessage);
          console.log('‚úÖ Notification saved:', parsedMessage);
        } else {
          console.log('‚ö†Ô∏è Duplicate message detected, skipping:', parsedMessage);
        }
      }
    } catch (error) {
      console.error('‚ùå Error handling Kafka message:', error);
    }
  }
  
  
  
  async handleKafkaEvent(topic: string, message: any) {
    try {
      const parsedMessage = JSON.parse(message.value.toString());
  
      console.log(`üì• Received message from "${topic}":`, parsedMessage);
  
      switch (topic) {
        case 'notification':
          await this.handleChatMessage(parsedMessage);
          break;
  
        case 'mypost':
          await this.handlePostEvent(parsedMessage);
          break;
  
        default:
          console.warn(`‚ö†Ô∏è Unknown topic: ${topic}`);
      }
      await this.handleKafkaMessage(message);
      // üîπ Ki·ªÉm tra v√† l∆∞u v√†o MongoDB n·∫øu kh√¥ng b·ªã tr√πng
      if (parsedMessage.messageId) {
        const existingNotification = await this.notificationModel.findOne({
          messageId: parsedMessage.messageId,
        });
  
        if (!existingNotification) {
          await this.notificationModel.create(parsedMessage);
          console.log('‚úÖ Notification saved:', parsedMessage);
        } else {
          console.log('‚ö†Ô∏è Duplicate message detected, skipping:', parsedMessage);
        }
      }
  
    } catch (error) {
      console.error(`‚ùå Error processing Kafka message from ${topic}:`, error);
    }
  }
  

  async getUserNotifications(userId: Types.ObjectId) {
    return await this.notificationModel
      .find({ userId })
      .sort({ createdAt: -1 })
      .exec();
  }

  async markAsRead(notificationId: Types.ObjectId) {
    return await this.notificationModel.findByIdAndUpdate(
      notificationId,
      { isRead: true },
      { new: true }
    );
  }

}
